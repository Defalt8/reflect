#pragma once
#ifndef REFLECT
#define REFLECT

#include <ds/tuple>

namespace reflect {

static constexpr struct Version { int major, minor, patch; } version { 0, 7, 11 };

template <typename O>
struct object_traits
{
	using object_t = O;
};

template <class C>
struct member_object_traits
{
	using class_t = C;
};

namespace traits {

	template <class O> struct object;
	// use member_object<C>::tuple
	template <class C> struct member_object;

} // namespace traits

// use member_object_t<C>::tuple
template <class C> using member_object_t = traits::member_object<C>;

} // namespace reflect


#endif // REFLECT