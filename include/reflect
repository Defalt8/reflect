#pragma once
#ifndef REFLECT
#define REFLECT

#include <ds/tuple>

namespace reflect {

static constexpr struct Version { int major, minor, patch; } version { 0, 10, 17 };

template <typename O, O *>
struct object_traits
{
	using object_t = O;
};

template <class C>
struct member_object_traits
{
	using class_t = C;
};

namespace traits {

	template <class O, O *> struct object;
	// use member_object<C>::tuple
	template <class C> struct member_object;

} // namespace traits

// use as object_t<C,C*>::tuple
template <class C, C * ptr_> using object_t = traits::object<C,ptr_>;

// use as member_object_t<C>::tuple
template <class C> using member_object_t = traits::member_object<C>;

template <class Tup
		, ds::enable_if_t<(ds::remove_cvref_t<Tup>::size() == 3), int> = 0
	> 
static constexpr ds::string_view const & 
get_id(Tup && refl_) 
{
	return refl_.template at<0>(); 
}

template <class Tup
		, ds::enable_if_t<(ds::remove_cvref_t<Tup>::size() == 3), int> = 0
	> 
static constexpr ds::string_view const & 
get_object_id(Tup && refl_) 
{
	return refl_.template at<0>(); 
}

template <class Tup
		, ds::enable_if_t<(ds::remove_cvref_t<Tup>::size() == 3), int> = 0
	> 
static constexpr ds::string_view const & 
get_type_id(Tup && refl_)   
{
	return refl_.template at<1>(); 
}

template <class Tup
		, typename R = decltype(ds::decl<Tup>().template at<2>())
		, ds::enable_if_t<(ds::remove_cvref_t<Tup>::size() == 3), int> = 0
	> 
static constexpr R &
get_object(Tup && refl_)
{
	return refl_.template at<2>(); 
}

template <class Tup
		, ds::enable_if_t<(ds::remove_cvref_t<Tup>::size() == 4), int> = 0
	>  
static constexpr ds::string_view const & 
get_id(Tup && refl_) 
{
	return refl_.template at<0>();
}

template <class Tup
		, ds::enable_if_t<(ds::remove_cvref_t<Tup>::size() == 4), int> = 0
	> 
static constexpr ds::string_view const & 
get_class_id(Tup && refl_)  
{
	return refl_.template at<0>();
}

template <class Tup
		, ds::enable_if_t<(ds::remove_cvref_t<Tup>::size() == 4), int> = 0
	>  
static constexpr ds::string_view const & 
get_member_id(Tup && refl_) 
{
	return refl_.template at<1>();
}

template <class Tup
		, ds::enable_if_t<(ds::remove_cvref_t<Tup>::size() == 4), int> = 0
	> 
static constexpr ds::string_view const & 
get_type_id(Tup && refl_)   
{
	return refl_.template at<2>();
}

template <class Tup
		, ds::enable_if_t<(ds::remove_cvref_t<Tup>::size() == 4), int> = 0
	> 
static constexpr ds::string_view const & 
get_class_type_id(Tup && refl_)   
{
	return refl_.template at<2>();
}

template <class Tup
		, typename R = decltype(ds::decl<Tup>().template at<3>())
		, ds::enable_if_t<(ds::remove_cvref_t<Tup>::size() == 4), int> = 0
	> 
static constexpr R
get_member_object_ptr(Tup && refl_)
{
	return refl_.template at<3>(); 
}

template <class Tup, class C
		, typename R = decltype(ds::decl<C>().*(ds::decl<Tup>().template at<3>()))
		, ds::enable_if_t<(ds::remove_cvref_t<Tup>::size() == 4), int> = 0
	> 
static constexpr R &
access_member(Tup && refl_, C && object)
{
	return object.*(refl_.template at<3>()); 
}


using ds::make_tuple;

} // namespace reflect


#endif // REFLECT